Names: Pauli Peralta and Rohit Rao
NetID: pp589 and rpr79

Description of Testing Strategy:
    For part 1, we began by testing against too many command line inputs and too little command line inputs. Next, we tested illegal command line inputs such as “12abc”, “-12”, or “0”. We also tested illegal file names and illegal directory names. In addition, we tested the provided example in the write up and other variations of files with numerous “\t” and “\n” in them. We also stress tested part 1 using files of varying sizes up to 100mb. Additionally, we tested it with files containing words with length of INT_MAX to make sure it could handle large words. Furthermore, we tested against leading and trailing newlines, tabs, and spaces. For each of the above test cases, we tested them using both redirection (using only the wrap length as command line input) and inputting the filename as the 2nd command line input. For the smaller cases, we also tested it through manual user input.

    For part 2, we began by testing against a directory with only 1 file until we were sure that our code worked. Then we tested it against a directory that was empty, a directory only containing “wrap.” files, only containing subdirectories, containing both subdirectories and regular files, and a directory that already contained the regular version and “wrap.” version of files. Once it worked with those cases, we made a directory that was approximately 0.97 gigabytes in size with 1000 textfiles and stress tested the program. Next, we tested against edge cases in file names such as “ wrap.txt”, “.wrap.txt”, “wrap. .txt”, and a few other variations. Then, we tested if it correctly handled file and directory names that were too large when combined. We also tested it with absolute and relative paths, and paths that were outside the current directory and paths inside subdirectories. Lastly, we tested it against directories with files that did not have read/write permissions. 

    After completing both part 1 and 2, we tested using Valgrind, Address Sanitizer, and UBSan to make sure that the program was behaving correctly.
